{"head":{"description":"Summary Each PIE is an individual UI Element or interaction that is designed to be re-used in the context of assessment. An example of aâ€¦"},"body":"<h1 id=\"summary\"><a href=\"#summary\" class=\"phenomic-HeadingAnchor\">#</a>Summary</h1>\n<p>Each PIE is an individual UI Element or interaction that is designed to be re-used in the context of assessment. An example of a PIE might be a multi-choice question-type or a question-type that allows a student to make a bar chart or plot points on a graph. However a PIE does not to be a question type, it can be any Custom Element. </p>\n<p>Users can configure one or more instances of PIEs to create questions/assessment experiences for students. See <a href=\"/using/rendering-items.md\">Rendering Items</a></p>\n<p>To create a PIE a developer implements:</p>\n<ol>\n<li>[Required] A <a href=\"https://www.w3.org/TR/custom-elements/\">Custom Element</a> that provides the user interface for the PIE</li>\n<li>[Required]* An NPM package that allows users/systems to install and use your PIE</li>\n<li>[Optional] A Controller that manipulates the model for the UI and/or processes user input to generate results/outcomes and learning activity </li>\n</ol>\n<p><em>See the <a href=\"../tutorial/development-tutorial.md\">Development Tutorial</a> For a step-by-step tutorial of how to develop a PIE.</em></p>\n<h4 id=\"example\"><a href=\"#example\" class=\"phenomic-HeadingAnchor\">#</a>Example</h4>\n<p>This is a quick example of how these components of a PIE are defined. Each will be explained in detail in the next few sections.</p>\n<p><strong>Custom Element</strong></p>\n<p>A CustomElement provides the UI for a PIE and exposes an API to the PIE Player: </p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPie</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HTMLElement</span> </span>{\n\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">super</span>();\n    <span class=\"hljs-keyword\">this</span>._model = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">this</span>._session = <span class=\"hljs-literal\">null</span>;\n  }\n\n  connectedCallback() {\n    <span class=\"hljs-keyword\">this</span>._rerender();\n  }\n\n  }</code></pre>\n<blockquote>\n<p>As a best-practice the PIE Custom Element should be written in ES6 (although CommonJS modules are also supported) The PIE project provides development <a href=\"https://github.com/PieLabs/pie-cli\">tools</a> that handle transpilation and bundling. </p>\n</blockquote>\n<p><strong>Controller</strong></p>\n<p>A Controller can be implemented by the PIE, this provides a model for the PIE Element to use in the UI and provides logic for analyzing a response and providing an outcome.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">model</span>(<span class=\"hljs-params\">config, session, env</span>) </span>{\n   <span class=\"hljs-comment\">// called when PIE is initialized and anytime `env` (environment) properties change</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outcome</span>(<span class=\"hljs-params\">config, session, env</span>) </span>{\n  <span class=\"hljs-comment\">// called to produce an outcome from the user interaction with the pie (score, etc)</span>\n}</code></pre>\n<p><strong>NPM Package</strong></p>\n<p>Each PIE is provided as a standard NPM package, using semver versioning.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"my-pie\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"dist/index.js\"</span>,\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {...},\n  ...\n}</code></pre>\n<p><em>* A Custom Element can in fact be defined as a local JS file relative to an Item configuration. This may be useful for testing during developemtn, however for effective re-use elements should be defined in an NMP package</em></p>\n","__filename":"docs/developing/summary.md","__url":"/docs/developing/summary/","__resourceUrl":"/docs/developing/summary/index.html","__dataUrl":"/docs/developing/summary/index.html.c828478be8b8d5dc20bf4e2e4cbeda2b.json"}
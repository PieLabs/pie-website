{"head":{"description":"Rendering Items The PIE Packaging Tool is used to assemble and package the Javascript and HTML into files needed to render an Assessmentâ€¦"},"body":"<h1 id=\"rendering-items\"><a href=\"#rendering-items\" class=\"phenomic-HeadingAnchor\">#</a>Rendering Items</h1>\n<p>The PIE <a href=\"../packaging-items.md\">Packaging Tool</a> is used to assemble and package the Javascript and HTML into files needed to render an Assessment Item in the browser.</p>\n<p>An Assessment Item packed by the Packaging Tool may have some or all of the following files:</p>\n<table>\n<thead>\n<tr>\n<th>File</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config.json</td>\n<td>JSON data that defines the questions &#x26; interaction PIEs in an item</td>\n</tr>\n<tr>\n<td>index.html</td>\n<td>Markup for adding the PIEs to html document</td>\n</tr>\n<tr>\n<td>pie-view.js</td>\n<td>Assembled Javascript for rendering the UI for the Assessment Item</td>\n</tr>\n<tr>\n<td>pie-controller.js</td>\n<td>Packaged controller code for the PIEs defined in the config</td>\n</tr>\n<tr>\n<td>pie-configure.js</td>\n<td>Packaged configure code (if defined) for the PIEs defined in the config</td>\n</tr>\n<tr>\n<td>pie-item.js</td>\n<td>Single file containing all code and config to render the item  (\n<code>--includeComplete</code>\n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"simple-usage---client-side-only\"><a href=\"#simple-usage---client-side-only\" class=\"phenomic-HeadingAnchor\">#</a>Simple Usage - Client Side Only</h2>\n<p>The simplest way to preview a <code>pie</code> item is to use the <code>pie-item.js</code> file that is built when you run <code>pie pack --includeComplete</code>. This defines a custom element that contains the <code>pie-player</code> and the item's markup and config. </p>\n<p>Example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"pie-item.js\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pie-item</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pie-item</span>></span></code></pre>\n<p>However this view doesn't provide any control over the player, it's really just so you can preview.</p>\n<h2 id=\"advanced--server-side-usage\"><a href=\"#advanced--server-side-usage\" class=\"phenomic-HeadingAnchor\">#</a>Advanced &#x26; Server-Side Usage</h2>\n<p>For finer control over how to use the <code>pie</code> item, or to use it in a secure-testing environment where data, including correct-responses, are not sent to the client you can use the other files in a packaged item: <code>pie-view.js</code> and <code>pie-controller.js</code></p>\n<h3 id=\"client-side-example\"><a href=\"#client-side-example\" class=\"phenomic-HeadingAnchor\">#</a>Client Side Example</h3>\n<p><a href=\"https://github.com/PieLabs/simple-pie-samples#pie-with-playerhtml\" target=\"_blank\">Here</a> is a link to a client side example.</p>\n<h3 id=\"server-side-example\"><a href=\"#server-side-example\" class=\"phenomic-HeadingAnchor\">#</a>Server Side Example</h3>\n<p>In some cases, such as for secure test delivery, it is desirable to render items using a remote server to run the controller logic provided by the PIEs in an assessment item. </p>\n<p><a href=\"https://github.com/PieLabs/pie-remote-controller-demo\" target=\"_blank\">Here</a> is a link to a server side example. </p>\n<blockquote>\n<p>Note: The code below is just for illustration, see the link above for a working sample.</p>\n</blockquote>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"pie-view.js\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"pie-remote-controller.js\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-comment\">&#x3C;!-- we declare a `pie-player` and within that tag is the markup from `index.html` --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pie-player</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">my-pie</span> <span class=\"hljs-attr\">pie-id</span>=<span class=\"hljs-string\">\"1\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">my-pie</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pie-player</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>></span><span class=\"javascript\">\n  env = {<span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'view'</span>};\n  session = [];\n\n  endpoints: {\n    <span class=\"hljs-attr\">model</span>: {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/model'</span>\n    },\n    <span class=\"hljs-attr\">outcome</span>: {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/outcome'</span>\n    }\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadJson</span>(<span class=\"hljs-params\">path</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>{\n      <span class=\"hljs-comment\">//load the json here ...</span>\n    }));\n  }\n\n  \n  player.addEventListener(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>)</span>{\n    loadJson(<span class=\"hljs-string\">'config.json'</span>)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =></span> { \n\n        <span class=\"hljs-comment\">/* someendpoints that our controller can call with sessions/env */</span> \n        <span class=\"hljs-keyword\">const</span> endpoints = {\n          <span class=\"hljs-attr\">model</span>: {\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/model'</span>\n          },\n          <span class=\"hljs-attr\">outcome</span>: {\n            <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/outcome'</span>\n          }\n        }\n\n        player.controller = <span class=\"hljs-keyword\">new</span> RemoteController(endpoints);\n      })\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> player.env(env))\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> player.sessions(sessions))\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =></span> <span class=\"hljs-built_in\">console</span>.error(e));\n  });\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<p>Below is an example of a simple server implementation running as a commonjs node module:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">const</span> pie = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./pie-controller'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">JSON</span>.parse(fs.readFileSync(<span class=\"hljs-string\">'./config.json'</span>));\n<span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> pie.PieController(config, pie.controllerMap);\n\n<span class=\"hljs-keyword\">let</span> handleError = <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n    res.writeHead(<span class=\"hljs-number\">500</span>, {<span class=\"hljs-string\">'Content-Type'</span> : <span class=\"hljs-string\">'text/plain'</span>});\n    res.write(err.toString());\n    res.end();\n  }\n}\n\nserver = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =></span> {\n\n  <span class=\"hljs-keyword\">if</span>(req.url === <span class=\"hljs-string\">'/model'</span> &#x26;&#x26; req.method === <span class=\"hljs-string\">'POST'</span>){\n\n    <span class=\"hljs-comment\">//parse session + env from the request body ...</span>\n    controller.model(config, session, env)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">model</span> =></span> {\n        res.writeHead(<span class=\"hljs-number\">200</span>, {<span class=\"hljs-string\">'Content-Type'</span> : <span class=\"hljs-string\">'application/json'</span>});\n        res.write(<span class=\"hljs-built_in\">JSON</span>.stringify(model));\n        res.end();\n      }).catch(handleError(res))\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (req.url = <span class=\"hljs-string\">'/outcome'</span> &#x26;&#x26; req.method === <span class=\"hljs-string\">'POST'</span>){\n    <span class=\"hljs-comment\">//parse session + env from the request body ...</span>\n    controller.outcome(config, session, env)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">outcome</span> =></span> {\n        res.writeHead(<span class=\"hljs-number\">200</span>, {<span class=\"hljs-string\">'Content-Type'</span> : <span class=\"hljs-string\">'application/json'</span>});\n        res.write(<span class=\"hljs-built_in\">JSON</span>.stringify(outcome));\n        res.end();\n      }).catch(handleError(res))\n  } <span class=\"hljs-keyword\">else</span> {\n    res.writeHead(<span class=\"hljs-number\">404</span>)\n    res.write(<span class=\"hljs-string\">''</span>);\n    res.end();\n  }\n}\n\nserver.on(<span class=\"hljs-string\">'listening'</span>, () => <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'server listening...'</span>));\nserver.listen(process.env.PORT || <span class=\"hljs-number\">5001</span>);</code></pre>\n","__filename":"docs/using/rendering-items.md","__url":"/docs/using/rendering-items/","__resourceUrl":"/docs/using/rendering-items/index.html","__dataUrl":"/docs/using/rendering-items/index.html.a253517b0c70e2b3777950558f453b03.json"}